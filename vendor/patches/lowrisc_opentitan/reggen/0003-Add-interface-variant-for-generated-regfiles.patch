From 6a2b86434761c759c149ed1af2edecf591ba17d2 Mon Sep 17 00:00:00 2001
From: Michael Rogenmoser <michael@rogenmoser.us>
Date: Mon, 17 Jul 2023 16:59:27 +0200
Subject: [PATCH] Add interface variant for generated regfiles

---
 reg_top.sv.tpl | 118 +++++++++++++++++++++++++++++++++++++++++++++----
 1 file changed, 109 insertions(+), 9 deletions(-)

diff --git a/reg_top.sv.tpl b/reg_top.sv.tpl
index 1834a8253..c859e02e3 100644
--- a/reg_top.sv.tpl
+++ b/reg_top.sv.tpl
@@ -130,26 +130,26 @@
 module ${mod_name} \
 % if use_reg_iface:
 #(
-    parameter type reg_req_t = logic,
-    parameter type reg_rsp_t = logic,
-    parameter int AW = ${addr_width}
+  parameter type reg_req_t = logic,
+  parameter type reg_rsp_t = logic,
+  parameter int AW = ${addr_width}
 ) \
 % else:
     % if needs_aw:
 #(
-    parameter int AW = ${addr_width}
+  parameter int AW = ${addr_width}
 ) \
     % endif
 % endif
 (
-  input clk_i,
-  input rst_ni,
+  input logic clk_i,
+  input logic rst_ni,
 % if rb.has_internal_shadowed_reg():
-  input rst_shadowed_ni,
+  input logic rst_shadowed_ni,
 % endif
 % for clock in rb.clocks.values():
-  input ${clock.clock},
-  input ${clock.reset},
+  input logic ${clock.clock},
+  input logic ${clock.reset},
 % endfor
 % if use_reg_iface:
   input  ${reg_intf_req} reg_req_i,
@@ -932,6 +932,106 @@ ${rdata_gen(f, r.name.lower() + "_" + f.name.lower())}\
 
 % endif
 endmodule
+
+% if use_reg_iface:
+module ${mod_name}_intf
+#(
+  parameter int AW = ${addr_width},
+  localparam int DW = ${block.regwidth}
+) (
+  input logic clk_i,
+  input logic rst_ni,
+% if rb.has_internal_shadowed_reg():
+  input logic rst_shadowed_ni,
+% endif
+% for clock in rb.clocks.values():
+  input logic ${clock.clock},
+  input logic ${clock.reset},
+% endfor
+  REG_BUS.in  regbus_slave,
+% if num_wins != 0:
+  REG_BUS.out  regbus_win_mst[${num_wins}-1:0],
+% endif
+  // To HW
+% if rb.get_n_bits(["q","qe","re"]):
+  output ${lblock}_reg_pkg::${reg2hw_t} reg2hw, // Write
+% endif
+% if rb.get_n_bits(["d","de"]):
+  input  ${lblock}_reg_pkg::${hw2reg_t} hw2reg, // Read
+% endif
+% if rb.has_internal_shadowed_reg():
+  output logic shadowed_storage_err_o,
+  output logic shadowed_update_err_o,
+%endif
+  // Config
+  input devmode_i // If 1, explicit error return for unmapped register access
+);
+ localparam int unsigned STRB_WIDTH = DW/8;
+
+`include "register_interface/typedef.svh"
+`include "register_interface/assign.svh"
+
+  // Define structs for reg_bus
+  typedef logic [AW-1:0] addr_t;
+  typedef logic [DW-1:0] data_t;
+  typedef logic [STRB_WIDTH-1:0] strb_t;
+  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)
+
+  reg_bus_req_t s_reg_req;
+  reg_bus_rsp_t s_reg_rsp;
+  
+  // Assign SV interface to structs
+  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
+  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)
+
+% if num_wins != 0:
+  reg_bus_req_t s_reg_win_req[${num_wins}-1:0];
+  reg_bus_rsp_t s_reg_win_rsp[${num_wins}-1:0];
+  for (genvar i = 0; i < ${num_wins}; i++) begin : gen_assign_window_structs
+    `REG_BUS_ASSIGN_TO_REQ(s_reg_win_req[i], regbus_win_mst[i])
+    `REG_BUS_ASSIGN_FROM_RSP(regbus_win_mst[i], s_reg_win_rsp[i])
+  end
+  
+% endif
+  
+
+  ${mod_name} #(
+    .reg_req_t(reg_bus_req_t),
+    .reg_rsp_t(reg_bus_rsp_t),
+    .AW(AW)
+  ) i_regs (
+    .clk_i,
+    .rst_ni,
+% if rb.has_internal_shadowed_reg():
+    .rst_shadowed_ni,
+% endif
+% for clock in rb.clocks.values():
+    .${clock.clock},
+    .${clock.reset},
+% endfor
+    .reg_req_i(s_reg_req),
+    .reg_rsp_o(s_reg_rsp),
+% if num_wins != 0:
+    .reg_req_win_o(s_reg_win_req),
+    .reg_rsp_win_i(s_reg_win_rsp),
+% endif
+% if rb.get_n_bits(["q","qe","re"]):
+    .reg2hw, // Write
+% endif
+% if rb.get_n_bits(["d","de"]):
+    .hw2reg, // Read
+% endif
+% if rb.has_internal_shadowed_reg():
+    .shadowed_storage_err_o,
+    .shadowed_update_err_o,
+% endif
+    .devmode_i
+  );
+  
+endmodule
+
+% endif
+
 <%def name="str_bits_sv(bits)">\
 % if bits.msb != bits.lsb:
 ${bits.msb}:${bits.lsb}\
-- 
2.31.1

